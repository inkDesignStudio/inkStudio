/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}

h1 {
  font-size: 1.52343rem;
  line-height: 1.125;
  margin-top: 1.875rem;
  margin-bottom: 0.75rem;
}

h2 {
  font-size: 1.333rem;
  line-height: 1.125;
  margin-top: 1.875rem;
  margin-bottom: 0.75rem;
}

h3 {
  font-size: 1.14286rem;
  line-height: 1.125;
  margin-top: 1.5rem;
  margin-bottom: 0.75rem;
}

html {
  font-size: 87.5%;
  line-height: 1.5;
}

/* Colors
==============================================*/
/* Breakpoints
==============================================*/
.load-animation div {
  position: absolute;
  display: block;
  width: 2em;
  height: 2em;
  margin: 0.25em;
  border: 0.25em solid;
  border-color: #333333 transparent transparent transparent;
  border-radius: 50%;
  -webkit-animation: load-animation 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
          animation: load-animation 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
}

.load-animation div:nth-child(1) {
  -webkit-animation-delay: -0.45s;
          animation-delay: -0.45s;
}

.load-animation div:nth-child(2) {
  -webkit-animation-delay: -0.3s;
          animation-delay: -0.3s;
}

.load-animation div:nth-child(3) {
  -webkit-animation-delay: -0.15s;
          animation-delay: -0.15s;
}

@-webkit-keyframes pulse {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(101, 200, 45, 0.5);
            box-shadow: 0 0 0 0 rgba(101, 200, 45, 0.5);
  }
  70% {
    -webkit-box-shadow: 0 0 0 10px rgba(101, 200, 45, 0);
            box-shadow: 0 0 0 10px rgba(101, 200, 45, 0);
  }
  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(101, 200, 45, 0);
            box-shadow: 0 0 0 0 rgba(101, 200, 45, 0);
  }
}

@keyframes pulse {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(101, 200, 45, 0.5);
            box-shadow: 0 0 0 0 rgba(101, 200, 45, 0.5);
  }
  70% {
    -webkit-box-shadow: 0 0 0 10px rgba(101, 200, 45, 0);
            box-shadow: 0 0 0 10px rgba(101, 200, 45, 0);
  }
  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(101, 200, 45, 0);
            box-shadow: 0 0 0 0 rgba(101, 200, 45, 0);
  }
}

@-webkit-keyframes pulse-load-more {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(189, 194, 199, 0.5);
            box-shadow: 0 0 0 0 rgba(189, 194, 199, 0.5);
  }
  70% {
    -webkit-box-shadow: 0 0 0 10px rgba(189, 194, 199, 0);
            box-shadow: 0 0 0 10px rgba(189, 194, 199, 0);
  }
  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(189, 194, 199, 0);
            box-shadow: 0 0 0 0 rgba(189, 194, 199, 0);
  }
}

@keyframes pulse-load-more {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(189, 194, 199, 0.5);
            box-shadow: 0 0 0 0 rgba(189, 194, 199, 0.5);
  }
  70% {
    -webkit-box-shadow: 0 0 0 10px rgba(189, 194, 199, 0);
            box-shadow: 0 0 0 10px rgba(189, 194, 199, 0);
  }
  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(189, 194, 199, 0);
            box-shadow: 0 0 0 0 rgba(189, 194, 199, 0);
  }
}

.load-animation {
  display: none;
  width: 2.5em;
  height: 2.5em;
  position: absolute;
  top: calc(50% - 1.25em);
  left: calc(50% - 1.25em);
  z-index: 10;
}

.js-ajax-running .load-animation {
  display: block;
}

@-webkit-keyframes load-animation {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}

@keyframes load-animation {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}

* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  padding: 0;
  margin: 0;
  font-family: Roboto;
}

main {
  background-color: #000000;
}

header {
  position: fixed;
  width: 100%;
  background: #000000;
  z-index: 101;
}

footer {
  height: 80vh;
  width: 100%;
  background-color: black;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

section.services {
  position: relative;
}

a {
  text-decoration: none;
}

textarea:focus, input:focus {
  outline: none;
}

textarea {
  resize: none;
}

a.nav_link {
  font-style: normal;
  font-weight: normal;
  font-size: 36px;
  color: white;
}

.contact {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  width: 100%;
  height: 100vh;
  position: fixed;
  z-index: 100;
  background-color: rgba(0, 0, 0, 0.7);
  visibility: hidden;
  opacity: 0;
  top: 0;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
}

.contact.on {
  visibility: visible;
  opacity: 1;
}

.contact__close {
  position: absolute;
  right: 2%;
  top: 3%;
  width: 20.5px;
  height: 20.5px;
}

.contact__close:hover {
  cursor: pointer;
}

.close__span {
  position: absolute;
  bottom: 40%;
  left: 0%;
  width: 20px;
  height: 3px;
  background-color: #FFFFFF;
}

.close__span:first-of-type {
  -webkit-transform: rotate(45deg);
      -ms-transform: rotate(45deg);
          transform: rotate(45deg);
}

.close__span:last-of-type {
  -webkit-transform: rotate(-45deg);
      -ms-transform: rotate(-45deg);
          transform: rotate(-45deg);
}

.contact__form {
  position: relative;
  background: #2F6C86;
  border-radius: 9px;
  line-height: 30px;
  text-align: center;
  padding: 3%;
}

.contact__input {
  display: block;
  width: 30vw;
  height: 3vw;
  border: none;
  background: #FFFFFF;
  border-radius: 5px;
  padding: 0.5% 0 0 1%;
  margin-top: 3%;
  font-style: normal;
  font-weight: normal;
  font-size: 12px;
  line-height: 14px;
  color: #000000;
}

.contact__input::-webkit-input-placeholder, :-moz-placeholder, ::-moz-placeholder, :-ms-input-placeholder {
  color: #8A8A8A;
}

.contact__inner {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

.contact__input.email {
  margin-right: 1vw;
}

.contact__input.comment {
  width: 61vw;
  height: 5vw;
  padding: 1.5% 0 0 1%;
}

.contact__form > h3 {
  font-style: normal;
  font-weight: bold;
  color: #ffffff;
  font-size: 24px;
  margin-top: 5%;
}

.contact__form > h4 {
  color: #ffffff;
  font-size: 24px;
  font-weight: normal;
}

.nav_link {
  opacity: 0;
  z-index: -10;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
  cursor: none;
  padding-bottom: 6vh;
}

.nav_link:last-child {
  padding-bottom: 0;
}

.nav_link.on {
  opacity: 1;
  z-index: 100;
  cursor: pointer;
}

.nav_link.on:hover {
  color: #2F6C86;
}

.full_width {
  width: 100%;
  height: 100vh;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  background-color: #000000;
}

.header_inner {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  padding: 2vh 3vw;
}

.preloader_container {
  margin: 0 auto;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -ms-flex-line-pack: center;
      align-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  position: relative;
  max-height: 400px;
  max-width: 400px;
  width: 100%;
  height: 100%;
}

.preloader_box {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-animation: rotation 6s;
          animation: rotation 6s;
}

@-webkit-keyframes rotation {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}

@keyframes rotation {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}

.preloader_ring {
  width: 100%;
  height: 100%;
}

.smile {
  max-width: 100px;
  max-height: 100px;
  width: 100%;
  height: 100%;
  opacity: 0;
  position: absolute;
  background: no-repeat url("/wp-content/themes/inkStudio/img/src/smile_loading.png");
  background-size: contain;
  background-position: 50%;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
}

.logo {
  max-height: 40px;
  opacity: 0;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
}

.main_title {
  display: inline-block;
  height: 22px;
  width: 0px;
  opacity: 0;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
  background: no-repeat url("/wp-content/themes/inkStudio/img/src/main_title.png");
  background-size: 112px 22px;
}

.line {
  display: inline-block;
  width: 12px;
  height: 4px;
  background-color: #fff;
  opacity: 0;
}

.menu_span {
  display: block;
  width: 23px;
  height: 3px;
  background-color: #ffffff;
  border-radius: 7px;
  margin-bottom: 5px;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
}

.menu_toggle {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
  opacity: 0;
}

.menu_span:nth-child(2) {
  width: 15px;
  -ms-flex-item-align: end;
      align-self: flex-end;
}

.menu_span:last-child {
  margin-bottom: 0;
}

/*.menu_hamburger:hover {*/
/*cursor: pointer;*/
/*}*/
.menu_span:nth-child(3).on {
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
  -webkit-transform: translateX(13px) rotate(-45deg) translateY(-13px);
      -ms-transform: translateX(13px) rotate(-45deg) translateY(-13px);
          transform: translateX(13px) rotate(-45deg) translateY(-13px);
}

.menu_span:nth-child(2).on {
  opacity: 0;
}

.menu_span:nth-child(1).on {
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
  -webkit-transform: translateX(11px) rotate(45deg) translateY(10px);
      -ms-transform: translateX(11px) rotate(45deg) translateY(10px);
          transform: translateX(11px) rotate(45deg) translateY(10px);
}

.menu {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  visibility: hidden;
  position: fixed;
  width: 100%;
  height: 0;
  background-color: black;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
  z-index: 100;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.overlay {
  height: 100vh;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
  padding: 19.5vh 0 10vh;
  visibility: visible;
}

.overlay.transparent {
  position: fixed;
  opacity: 0.5;
}

.links_wrapper {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  padding-top: 10vh;
}

.icon_list {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: baseline;
      -ms-flex-align: baseline;
          align-items: baseline;
  opacity: 0;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
}

.icon_list.on {
  opacity: 1;
}

.nav_img:hover {
  cursor: pointer;
}

.nav_img {
  padding-right: 2vw;
}

.nav_img:last-child {
  padding-right: 0;
}

.nav_switcher {
  position: absolute;
  right: 4vw;
  bottom: 10vh;
  opacity: 0;
  color: #2F6C86;
  font-family: Roboto;
  font-style: normal;
  font-weight: bold;
  font-size: 33px;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
}

.nav_switcher.on {
  opacity: 1;
}

.nav_switcher.on:hover {
  cursor: pointer;
}

.marquee {
  display: block;
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  padding: 5vw 0;
  font-style: italic;
  font-weight: bold;
  font-size: 96px;
  color: #FFFFFF;
}

.marquee_img_1 {
  display: inline-block;
  -webkit-animation: scroll_1 2s infinite linear;
          animation: scroll_1 2s infinite linear;
  background-color: black;
  -webkit-animation-iteration-count: infinite;
          animation-iteration-count: infinite;
  /*animation-direction: alternate;*/
}

.marquee_text {
  position: relative;
}

/*.marquee_img_2 {*/
/*    display: inline-block;*/
/*    animation: scroll_2 20s infinite linear;*/
/*    background-color: black;*/
/*    animation-delay: 102s;*/
/*}*/
/*@keyframes scroll_1 {*/
/*    0% {*/
/*        transform: translate(0, 0);*/
/*    }*/
/*    100% {*/
/*        transform: translate(-10%, 0);*/
/*    }*/
/*}*/
/*@keyframes scroll_2 {*/
/*    0% {*/
/*        transform: translate(0%, 0);*/
/*    }*/
/*    100% {*/
/*        transform: translate(-200%, 0);*/
/*    }*/
/*}*/
.portfolio_grid {
  display: grid;
  grid-template-rows: repeat(3, 30vw);
  grid-template-columns: repeat(2, 50%);
  grid-gap: 0;
}

.portfolio__grid_item {
  position: relative;
  background-color: white;
  overflow: hidden;
  width: 100%;
  height: 100%;
}

.portfolio__grid_item:hover {
  cursor: pointer;
}

.portfolio__inner {
  position: absolute;
  bottom: 0;
  height: 30%;
  visibility: hidden;
  width: 100%;
  -webkit-transition: 0.4s;
  -o-transition: 0.4s;
  transition: 0.4s;
  background-color: rgba(0, 0, 0, 0.7);
  opacity: 0;
}

.portfolio__title {
  padding: 2% 0 0 5%;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
  overflow: hidden;
}

.portfolio_desc {
  padding: 3%;
  text-indent: 2%;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
  overflow: hidden;
}

.portfolio__work {
  width: 100%;
  height: auto;
}

.portfolio__grid_item:hover .portfolio__inner {
  visibility: visible;
  opacity: 1;
}

.portfolio__grid_item:hover .portfolio__title {
  opacity: 1;
}

.portfolio__grid_item:nth-child(2) {
  background-color: #AD4343;
}

.portfolio__grid_item:nth-child(3) {
  background-color: #5C6952;
}

.portfolio__grid_item:nth-child(4) {
  background-color: #7C7BA4;
}

.portfolio__grid_item:nth-child(5) {
  background-color: black;
}

.portfolio__grid_item:nth-child(6) {
  background-color: #C4C4C4;
}

.services_grid {
  display: grid;
  grid-template-rows: auto;
  grid-template-columns: repeat(3, 33%);
  grid-gap: 0.33%;
  background-color: #000000;
  -webkit-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
}

.services_grid.on {
  grid-template-columns: repeat(3, 33.33%);
  grid-gap: 0;
}

.service {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  font-style: italic;
  font-weight: bold;
  font-size: 36px;
  color: #FFFFFF;
  background-color: #2F6C86;
  -webkit-transition: 0.1s;
  -o-transition: 0.1s;
  transition: 0.1s;
  overflow: hidden;
  text-align: center;
}

.service.selected:hover .service_inner.on {
  opacity: 1;
}

.service.unselected:hover {
  -webkit-transform: scale(0.9);
      -ms-transform: scale(0.9);
          transform: scale(0.9);
}

.service:hover {
  cursor: pointer;
}

.service > h1 {
  position: absolute;
  max-width: 301px;
  font-size: 34px;
}

h1.on:hover {
  cursor: pointer;
}

h1.on.main:hover {
  cursor: default;
}

.service_inner.on {
  -webkit-transition: 0.4s;
  -o-transition: 0.4s;
  transition: 0.4s;
  -webkit-transform: rotateY(360deg);
          transform: rotateY(360deg);
  opacity: 1;
  visibility: visible;
}

h1.on {
  top: 5%;
  opacity: 0.5;
  -webkit-transition: 1s;
  -o-transition: 1s;
  transition: 1s;
  z-index: 11;
}

h1.main {
  opacity: 1;
}

.service_unactive {
  position: absolute;
  top: 0;
  height: 100%;
  background: #193947;
  z-index: 10;
  width: 100%;
  opacity: 0;
}

.service_unactive.on {
  opacity: 1;
  height: 20%;
}

.service_unactive.active {
  height: 0;
}

.service_unactive.on:hover {
  cursor: pointer;
}

.service_inner {
  font-style: normal;
  text-align: center;
  opacity: 0;
  overflow: hidden;
  visibility: hidden;
  padding: 25% 0 15% 0;
}

.service.selected {
  cursor: default;
}

.service_inner > h2 {
  font-style: normal;
  font-weight: bold;
  font-size: 24px;
  line-height: 25px;
  margin-bottom: 1vw;
}

.service_inner > h2:last-of-type {
  font-style: normal;
  font-weight: bold;
  font-size: 24px;
  line-height: 25px;
  margin: 1vw 0;
}

.srv_desc > h3 {
  font-weight: normal;
  font-size: 20px;
  line-height: 24px;
}

.srv_img {
  max-height: 64px;
  line-height: 0;
}

.btn {
  padding: 5%;
  color: #2F6C86;
  background: #000000;
  border-radius: 30px;
  font-size: 17px;
  visibility: hidden;
}

.btn:hover {
  -webkit-transition: 0.4s;
  -o-transition: 0.4s;
  transition: 0.4s;
  cursor: pointer;
  color: white;
}

.btn.on {
  visibility: visible;
}

.btn.submit {
  display: block;
  border: none;
  margin: 3% auto 0 auto;
  visibility: visible;
  padding: 1.5% 3%;
}

.footer_inner {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.footer_inner > h2 {
  font-style: normal;
  font-weight: normal;
  font-size: 30px;
  line-height: 35px;
  color: #FFFFFF;
  margin-bottom: 8vh;
}

.footer_contacts {
  margin-bottom: 8vh;
}

.footer_contacts > p {
  font-size: 24px;
  line-height: 28px;
  color: #FFFFFF;
  text-align: center;
}

.footer_top {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.footer_top > .logo {
  opacity: 1;
  max-height: 75px;
  margin-bottom: 2vh;
}

.footer_title > .main_title {
  width: 234px;
  height: 40px;
  background: no-repeat url("/wp-content/themes/inkStudio/img/src/main_title.png");
  background-size: 234px 40px;
  opacity: 1;
}

.footer_title {
  margin-bottom: 8vh;
}

.footer_title > .line {
  opacity: 1;
}

.footer_inner > .icon_list {
  opacity: 1;
}

.main-header {
  display: block;
}

.portfolio__inner {
  position: absolute;
  bottom: 0;
  height: 30%;
  visibility: hidden;
  width: 100%;
  -webkit-transition: 0.4s;
  -o-transition: 0.4s;
  transition: 0.4s;
  background-color: rgba(0, 0, 0, 0.7);
  opacity: 0;
}

.portfolio__title {
  padding: 2% 0 0 5%;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
  overflow: hidden;
}

.portfolio_desc {
  padding: 3%;
  text-indent: 2%;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
  overflow: hidden;
}

@media all and (min-width: 640px) {
  h1 {
    font-size: 1.77689rem;
    line-height: 1.25;
  }
  h2 {
    font-size: 1.333rem;
    line-height: 1.25;
  }
  h3 {
    font-size: 1.14286rem;
    line-height: 1.25;
  }
  html {
    font-size: 100%;
  }
}

@media (max-width: 1024px) {
  .marquee {
    font-size: 38px;
  }
  .service > h1 {
    font-size: 24px;
  }
  img.srv_img {
    max-height: 36px;
  }
  .service_inner > h2 {
    font-size: 18px;
  }
  .service_inner > h2:last-of-type {
    font-size: 18px;
  }
  .srv_desc > h3 {
    font-size: 16px;
    line-height: 18px;
  }
  .btn {
    font-size: 15px;
  }
  .contact__form {
    line-height: 20px;
  }
  .contact__form > h3 {
    font-size: 16px;
  }
  .contact__form > h4 {
    font-size: 14px;
  }
  .contact__input {
    font-size: 10px;
  }
  .btn.submit {
    font-size: 14px;
  }
}

@media (max-width: 768px) {
  .marquee {
    font-size: 34px;
  }
  .service > h1 {
    font-size: 16px;
  }
  img.srv_img {
    max-height: 24px;
  }
  .service_inner > h2 {
    font-size: 16px;
  }
  .service_inner > h2:last-of-type {
    font-size: 16px;
  }
  .srv_desc > h3 {
    font-size: 12px;
    line-height: 14px;
  }
  .btn {
    font-size: 14px;
  }
  .contact__form {
    line-height: 20px;
  }
  .contact__form > h3 {
    font-size: 16px;
  }
  .contact__form > h4 {
    font-size: 14px;
  }
  .contact__input {
    font-size: 10px;
    margin-top: 1.5%;
  }
  .btn.submit {
    font-size: 14px;
  }
}

@media (max-width: 480px) {
  .preloader_container {
    padding: 10vw;
  }
  .marquee {
    font-size: 30px;
  }
  .marquee_img_1 {
    height: 5vh;
  }
  .marquee_img_2 {
    height: 5vh;
  }
  .portfolio_grid {
    grid-template-columns: repeat(2, 50vw);
    grid-template-rows: repeat(3, 50vw);
  }
  .services_grid {
    grid-template-columns: 100vw;
    grid-template-rows: repeat(3, auto);
  }
  .services_grid.on {
    grid-gap: 0;
    grid-template-columns: 100vw;
  }
  .service_inner {
    padding: 5%;
  }
  .service_inner.on {
    margin-top: 0;
  }
  .service > h1 {
    -webkit-transition: 0.4s;
    -o-transition: 0.4s;
    transition: 0.4s;
    font-size: 16px;
    line-height: 22px;
  }
  .services_grid h1.on {
    top: auto;
    -webkit-transform: rotate(-90deg) translate(0, -44.5vw);
        -ms-transform: rotate(-90deg) translate(0, -44.5vw);
            transform: rotate(-90deg) translate(0, -44.5vw);
  }
  .service_unactive {
    height: 100%;
    left: 0;
    width: 100vw;
  }
  .service_unactive.active {
    width: 0;
  }
  .service_unactive.on {
    width: 12%;
    height: 100%;
  }
  .service_inner > h2 {
    font-size: 14px;
    line-height: 16px;
    margin-bottom: 1vw;
  }
  .srv_desc > h3 {
    font-size: 10px;
    line-height: 15px;
  }
  .service_inner > img {
    max-width: 42px;
  }
  .service_inner > h2:last-of-type {
    font-size: 16px;
    line-height: 16px;
    margin: 1vw 0;
  }
  .btn {
    font-size: 12px;
    line-height: 16px;
  }
  .footer_top > .logo {
    max-height: 38px;
  }
  .footer_title > .main_title {
    width: 112px;
    height: 22px;
    background: no-repeat url("/wp-content/themes/inkStudio/img/src/main_title.png");
    background-size: 112px 22px;
  }
  .footer_inner > h2 {
    font-size: 16px;
    line-height: 18px;
  }
  .footer_contacts > p {
    font-size: 14px;
    line-height: 16px;
  }
  .contact__form > h3 {
    font-size: 20px;
    margin-top: 15%;
  }
  .contact__form > h4 {
    font-size: 14px;
    max-width: 80%;
    margin: 0 auto 2% auto;
  }
  .contact__input.name, .contact__input.phone, .contact__input.email, .contact__input.comment {
    margin: 0 auto 2% auto;
    width: 100%;
    height: 7vw;
  }
  .contact__inner {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
  }
  .contact__input.comment {
    height: 15vw;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
